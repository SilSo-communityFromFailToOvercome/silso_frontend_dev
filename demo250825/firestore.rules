rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // FAQ Rules
    match /faqs/{faqId} {
      // Allow users to read their own FAQs and create new ones
      allow read, create: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Allow admins to read, update, and delete all FAQs
      allow read, write: if request.auth != null && isAdmin();
      
      // Allow users to update their own FAQs only if status is 'pending'
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.userId && 
                    resource.data.status == 'pending';
    }
    
    // FAQ Activity Rules (for admin audit trail)
    match /faq_activity/{activityId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // User Rules
    match /users/{userId} {
      allow read, write: if request.auth != null && 
                         (request.auth.uid == userId || isAdmin());
    }
    
    // Community Posts Rules
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
                           (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Comments Rules
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
                           (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Notifications Rules
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
                         request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && isAdmin();
    }
    
    // Blocking Rules
    match /blocking/{blockId} {
      allow read, write: if request.auth != null && 
                         request.auth.uid == resource.data.blockerId;
      allow read: if request.auth != null && isAdmin();
    }
    
    // Announcements Rules
    match /announcements/{announcementId} {
      // Allow all authenticated users to read published announcements
      allow read: if request.auth != null && resource.data.status == 'published';
      
      // Allow admins to read, create, update, and delete all announcements
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Announcement Activity Rules (for admin audit trail)
    match /announcement_activity/{activityId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Reports Rules
    match /reports/{reportId} {
      // Allow users to read their own reports
      allow read: if request.auth != null && request.auth.uid == resource.data.reporterId;
      
      // Allow users to create reports
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.reporterId &&
                    request.resource.data.status == 'pending';
      
      // Allow admins to read, update, and delete all reports
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Report Activity Rules (for admin audit trail)
    match /report_activity/{activityId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true;
    }
  }
}